service: auction-service
frameworkVersion: "3.3"

provider:
  name: aws
  runtime: nodejs18.x
  memorySize: 256
  stage: ${opt:stage, 'dev'}
  region: us-east-1
  environment:
    AUCTIONS_TABLE_NAM9arn E: ${self:custom.AuctionsTable.name}
    MAIL_QUEUE_URL: ${self:custom.MailQueue.url}
  httpApi:
    authorizers:
      customAuthorizer:
        type: request
        functionArn: ${self:custom.authorizer}
  iam:
    role:
      statements:
        - ${file(iam/AuctionsTableIAM.yml):AuctionsTableIAM}
        - ${file(iam/MailQueueIAM.yml):MailQueueIAM}
resources:
  Resources:
    AuctionsTable: ${file(resources/AuctionsTable.yml):AuctionsTable}

functions:
  createAuction:
    handler: src/handlers/createAuction.handler
    events:
      - httpApi:
          path: /auction
          method: POST
          authorizer:
            name: customAuthorizer

  getAuctions:
    handler: src/handlers/getAuctions.handler
    events:
      - httpApi:
          path: /auctions
          method: GET
          authorizer:
            name: customAuthorizer

  getAuction:
    handler: src/handlers/getAuction.handler
    events:
      - httpApi:
          path: /auction/{id}
          method: GET
          authorizer:
            name: customAuthorizer

  placeBid:
    handler: src/handlers/placeBid.handler
    events:
      - httpApi:
          path: /auction/{id}/bid
          method: PATCH
          authorizer:
            name: customAuthorizer

  processAuctions:
    handler: src/handlers/processAuctions.handler
    # events:
    #   - schedule: rate(1 minute)

custom:
  authorizer: arn:aws:lambda:${aws:region}:${aws:accountId}:function:auth-service-${self:provider.stage}-auth
  AuctionsTable:
    name: !Ref AuctionsTable
    arn: !GetAtt AuctionsTable.Arn
  MailQueue: 
    arn: ${cf:notification-service-${self:provider.stage}.MailQueueArn}
    url: ${cf:notification-service-${self:provider.stage}.MailQueueUrl}